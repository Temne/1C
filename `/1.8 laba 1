// the FIRST LABARATORNAYA. 1 semestr. 2022. 
#include <stdio.h>// the central of code is ASCII, sum too, we read number code of element in ASCII and - in it code of '0'
#include <stdlib.h>//abs, module
#include <limits.h>
#include <string.h>

#define NUMBER_OF_DIGITS 32
#define MAX_NAME 100
#define MEM_ERR "MEMORY ALLOCATION ERROR"

int countBinNumberDivision(int);
int* createBinNumber(int);
void TransformBinNumber(int*, int*, int);
int SumElementsOfNumber(int);

int countBinNumberDivision(int decNumber)
{
    int count = 0;
    decNumber = abs(decNumber);
    while (decNumber != 0)
    {
        decNumber /= 2;
        count++;
    }
    return count;
}

int* createBinNumber(int decNumber)
{
    int absDecNumber = abs(decNumber);
    int binDigitsCount = countBinNumberDivision(decNumber);//6 110
    int* binArray = (int*)calloc(binDigitsCount, sizeof(int));//3
    if (!(binArray))
    {
        printf_s(MEM_ERR);
        return 1;
    }
    for (int i = binDigitsCount - 1; i >= 0; i--)
    {
        if (absDecNumber % 2 == 0)
        {
            binArray[i] = 0;
        }
        else
        {
            binArray[i] = 1;
        }
        absDecNumber /= 2;
    }
    return binArray;
    free(binArray);
}

void TransformBinNumber(int* bytes4BinNumber, int* binNumber, int decNumber)
{
    int count = countBinNumberDivision(decNumber);//6 110 3 
    for (int i = 0; i < count; i++)
    {
        bytes4BinNumber[i + NUMBER_OF_DIGITS - count] = binNumber[i];//000..00110
    }

    if (decNumber < 0)
    {
        for (int i = 0; i < NUMBER_OF_DIGITS; i++)
        {
            if (bytes4BinNumber[i] == 0)
            {
                bytes4BinNumber[i] = 1;
            }
            else
            {
                bytes4BinNumber[i] = 0;
            }
        }

        for (int i = NUMBER_OF_DIGITS - 1; i >= 0; i--)
        {
            if (bytes4BinNumber[i] == 0)
            {
                bytes4BinNumber[i] = 1;
                break;
            }
            else
            {
                bytes4BinNumber[i] = 0;
                break;
            }
        }
    }
}

int SumElementsOfNumber(int number)
{
    char elem[13];
    sprintf_s(elem, 12, "%d", abs(number));//12 - max and min number len
    elem[12] = '\0';
    int summ = 0;
    for (int i = 0; elem[i]!= '\0'; i++ )// sprintf_s need '\0' in end, that ti[ical end for sprintfs 
    {
        summ += elem[i] - '0';// see the first line 
    }
    return summ;
    free(elem);
}

int main()
{

    FILE* inputFile, * outputFile;
    printf_s("Enter input and output file names\n>");
    char* inputFileName = malloc(MAX_NAME * sizeof(char));
    char* outputFileName = malloc(MAX_NAME * sizeof(char));
    if (!(inputFileName || outputFileName))
    {
        printf_s(MEM_ERR);
        return 1;
    }
    scanf_s("%s %s", inputFileName, 100, outputFileName, 100);

    if (fopen_s(&inputFile, "input.txt", "r") || fopen_s(&outputFile, "output.txt", "r+"))
    {
        printf_s("File open error ");
        return 1;
    }

    char* StringCheck = (char*)calloc(13, sizeof(char));
    char* MinString = "-2147483648";
    char* MaxString = "2147483647";
    if (fgets(StringCheck, 13, inputFile))
    {
        if (StringCheck[0] == '-')
        {
            if (strlen(StringCheck) > strlen(MinString))
            {
                printf_s("Your number is less than acceptable");
                return 1;
            }
            else if (strlen(StringCheck) == strlen(MinString))
            {
                for (int i = 1; i < strlen(StringCheck); i++)
                {
                    if (StringCheck[i] > MinString[i])
                    {
                        printf_s("Your number is less than acceptable");
                        return 1;
                    }
                }
            }
        }
        else
        {
            if (strlen(StringCheck) >= strlen(MaxString))
            {
                for (int i = 0; i < strlen(StringCheck); i++)
                {
                    if (StringCheck[i] > MaxString[i])
                    {
                        printf_s("your number is more than acceptable");
                        return 1;
                    }
                }
            }
        }
    }
    fseek(inputFile, 0, 0);
    int inputDecNumber;
    if (!(fscanf_s(inputFile, "%d", &inputDecNumber)))
    {
        printf_s("no numbers in input file");
        return 1;
    }
    int count = countBinNumberDivision(inputDecNumber);

    int* binaryNumber = createBinNumber(inputDecNumber);//{1, 1, 0}
    if (!(binaryNumber))
    {
        printf_s(MEM_ERR);
        return 1;
    }

    int* digits32BinNumber = (int*)calloc(NUMBER_OF_DIGITS, sizeof(int));//0000..0110
    if (!(digits32BinNumber))
    {
        printf_s(MEM_ERR);
        return 1;
    }
    TransformBinNumber(digits32BinNumber, binaryNumber, inputDecNumber);
    free(binaryNumber);
    printf_s("%d\n\n", SumElementsOfNumber(inputDecNumber));
    for (int i = 0; i < NUMBER_OF_DIGITS; i++)
    {
        if (i % 4 == 0 && i != 0)
        {
            printf_s(" ");
        }
        printf_s("%d ", digits32BinNumber[i]);
    }
    for (int i = 0; i < NUMBER_OF_DIGITS; i++)
    {
        if (i % 4 == 0 && i != 0)
        {
            fprintf_s(outputFile, " ");
        }
        fprintf_s(outputFile, "%d", digits32BinNumber[i]);
    }
    free(digits32BinNumber);
    fclose(inputFile);
    fclose(outputFile);
}
